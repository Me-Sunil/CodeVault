package com.Coding;

import java.util.LinkedList;

public class DogCatQueue {

	LinkedList<Dog> dogQueue = new LinkedList<Dog>();
	LinkedList<Cat> catQueue = new LinkedList<Cat>();
	int order = 0;

	public static void main(String[] args) {

	}

	public void enqueue(Animal a) {
		a.setOrder(order);
		order++;
		if (a instanceof Dog) {
			dogQueue.add((Dog) a);
		} else {
			catQueue.add((Cat) a);
		}

	}

	public Animal dequeueAny() {
		if (dogQueue.size() == 0) {
			return dequeueCat();
		} else if (catQueue.size() == 0) {
			return dequeueDog();
		}

		Dog dog = dogQueue.peek();
		Cat cat = catQueue.peek();

		if (dog.isOlderThan(cat))
			dequeueDog();
		else
			dequeueCat();

	}

	public Dog dequeueDog() {

	}

	public Cat dequeueCat() {

	}

	abstract class Animal {
		protected String name;
		private int order;

		public Animal(String name) {
			this.name = name;
		};

		public void setOrder(int order) {
			this.order = order;
		}

		public int getOrder() {
			return order;
		}

		public boolean isOlderThan(Animal a) {
			return (a.getOrder() > this.order);
		}

	}

	class Dog extends Animal {
		public Dog(String name) {
			super(name);
		}
	}

	class Cat extends Animal {
		public Cat(String name) {
			super(name);
		}

	}
}
